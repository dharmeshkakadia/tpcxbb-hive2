<?xml version="1.0" encoding="UTF-8"?>

<!--
/*******************************************************************************
 * Copyright (c) 2013, bankmark and/or its affiliates. All rights reserved. 
 * bankmark UG PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 ******************************************************************************/
-->
<generation>	

	<!-- example of parallel scheduling plan on a 3 node cluster
	Shows which tables will be generate on which nodes depending on the benchmark phase (phase: normal, refresh)
	
	Refresh tables generate extra data during refresh (e.g. add new data to the existing tables)
	In "normal"-Phase  generate table rows:  [0,REFRESH_PERCENTAGE*Table.Size]; 
	In "refresh"-Phase generate table rows:  [REFRESH_PERCENTAGE*Table.Size+1, Table.Size] 
	
												|Generate on node:		|			|Generate on node:	
	Table					|used	|fixed size	|1/3	|2/3	|3/3	|refresh	|1/3	|2/3	|3/3
	======================================================================================================	
	Not used tables:
	income_band				|		|			|x		|x		|x		|			|		|		|	
	reason					|		|			|x		|x		|x		|			|		|		|	
	ship_mode				|		|			|x		|x		|x		|			|		|		|
	web_site				|		|			|x		|x		|x		|			|		|		|
	_____________________________________________________________________________________________________
	Static tables:
	date_dim				|x		|x			|x		|		|		|			|		|		|
	time_dim				|x		|x			|x		|		|		|			|		|		|
	customer_demographics	|x		|x			|x		|		|		|			|		|		|
	household_demographics	|x		|x			|x		|		|		|			|		|		|
	_____________________________________________________________________________________________________	
	"Normal" tables:		
	store					|x		|			|x		|x		|x		|			|		|		|
	warehouse				|x		|			|x		|x		|x		|			|		|		|
	promotion				|x		|			|x		|x		|x		|			|		|		|
	web_page				|x		|			|x		|x		|x		|			|		|		|
	_____________________________________________________________________________________________________
	Refreshed tables:
	customer				|x		|			|x		|x		|x		|x			|x		|x		|x
	customer_address		|x		|			|x		|x		|x		|x			|x		|x		|x
	item					|x		|			|x		|x		|x		|x			|x		|x		|x
	item_marketprices		|x		|			|x		|x		|x		|x			|x		|x		|x
	inventory				|x		|			|x		|x		|x		|x			|x		|x		|x
	store_sales				|x		|			|x		|x		|x		|x			|x		|x		|x
	store_returns			|x		|			|x		|x		|x		|x			|x		|x		|x
	web_sales				|x		|			|x		|x		|x		|x			|x		|x		|x
	web_returns				|x		|			|x		|x		|x		|x			|x		|x		|x
	web_clickstreams		|x		|			|x		|x		|x		|x			|x		|x		|x
	product_reviews			|x		|			|x		|x		|x		|x			|x		|x		|x
	
	
	 -->

	<property name="${interleaveWebClicks}" type="double">0</property>
	
	<!-- DEFAULT Scheduler for all Tables, if no table specific scheduler is specified-->
	<!--  used for "normal" tables. Normal "non-refresh" tables are excluded from generation during refresh phase  -->
	<scheduler name="DefaultScheduler">
		<partitioner name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner"
			staticTableOnAllNodes="false">
			<prePartition><![CDATA[
				pdgf.core.dataGenerator.scheduler.Partition partition =getParentPartitioner().getDefaultPrePartition(project, table);	
				
				//exclude non-refresh tables from generation during refresh phase.
				if(${REFRESH_SYSTEM_ENABLED}>0 && ${REFRESH_PHASE}>0 ){
					partition.setExcluded(true);
				}
				return partition;							
				
				]]></prePartition>
		</partitioner>
	</scheduler>
	
	<!-- DEFAULT output for all Tables, if no table specific output is specified-->
	<output name="CSVRowOutput">
		<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
		<outputDir>output/</outputDir>
		<fileEnding>.dat</fileEnding>
		<delimiter>|</delimiter>
		<charset>UTF-8</charset>
		<sortByRowID>true</sortByRowID>
	</output>

	<schema name="default">
		<tables>	
		<!-- not refreshed tables -->	
			
			<!-- tables not used in benchmark, but some tables have references to them. not refreshed. Kept for legacy reasons  -->
			<table name="income_band"></table>
			<table name="reason"></table>
			<table name="ship_mode"></table>
			<table name="web_site"></table>		
			<!-- /tables not used in benchmark  -->
			
			<!-- Static tables (fixed small size, generated only on node 1, skipped on others, not generated during refresh) -->
			<table name="date_dim" static="true"></table>
			<table name="time_dim" static="true"></table>
			<table name="customer_demographics" static="true"></table>
			<table name="household_demographics" static="true"></table>
			<!-- /static tables -->
			
			<!-- "normal" tables. split over all nodes. not generated during refresh -->
			<table name="store"></table>
			<table name="warehouse"></table>
			<table name="promotion"></table>
			<table name="web_page"></table>
			<!-- /"normal" tables.-->
			
		<!-- /not refreshed tables -->	
			
			<!-- 
			refreshed tables. Generated on all nodes. 
			Refresh tables generate extra data during refresh (e.g. add new data to the existing tables)
			In "normal"-Phase  generate table rows:  [0,REFRESH_PERCENTAGE*Table.Size]; 
			In "refresh"-Phase generate table rows:  [REFRESH_PERCENTAGE*Table.Size+1, Table.Size] 
			.Has effect only if  ${REFRESH_SYSTEM_ENABLED}==1. 
			-->
			<table name="customer">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
					
					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>

			<table name="customer_address">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}	
					
					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>


			<table name="item">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>

			<table name="item_marketprices">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
	
					
					]]></prePartition>
					</partitioner>
				</scheduler>

  <output name="SplitFileOutputWrapper">
  <!-- DEFAULT output for all Tables, if no table specific output is specified-->
    <output name="CSVRowOutput">
      <fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
      <outputDir>output/</outputDir>
      <fileEnding>.dat</fileEnding>
      <delimiter>|</delimiter>
      <charset>UTF-8</charset>
      <sortByRowID>true</sortByRowID>
    </output>

    <output name="StatisticsOutput" active="1">
      <size>${item_size}</size><!-- a counter per item .. initialize later-->

      <fileTemplate><![CDATA[outputDir + table.getName()+"_audit" +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
      <outputDir>output/</outputDir>
      <fileEnding>.csv</fileEnding>
      <delimiter>,</delimiter>
      <header><!--"" + pdgf.util.Constants.DEFAULT_LINESEPARATOR-->
      </header>
      <footer></footer>

      <tableChangedEventTemplate><![CDATA[    
      //signature: (int tableID, int timeID, pdgf.core.dbSchema.Table table, pdgf.core.dbSchema.Project project, java.util.concurrent.atomic.AtomicLong[] counter, java.util.concurrent.ConcurrentHashMap keyValueStore, pdgf.output.StatisticsOutput output){ 
      //reset counters
      for ( int i = 0 ; i < counter.length; i++) {
        counter[i].getAndSet(0L);
      }
    
      ]]></tableChangedEventTemplate>
    
      <!-- Format the collected counter statistics -->
      <formaterTemplate><![CDATA[     
         //Because of the "refresh" system the actual "item" table size is dynamically determined during runtime.
          
        long realItemTableSize = project.getTable("item").getScheduler().getPartitioner().getPrePartition(project, project.getTable("item")).getRowStop();
        long min=Long.MAX_VALUE;
        long max=Long.MIN_VALUE;
        long sum=0;
        boolean monotonic=true;
        java.util.ArrayList missing = new java.util.ArrayList();
        java.util.ArrayList minConstraint = new java.util.ArrayList();
        long minConstraintValue=(long)project.getXMLProperty("item_marketprice_min_competitors_per_item");
        for (int i = 0; i < realItemTableSize; i++) {
          long count=counter[i].get();
          min=Math.min(min, count);
          max=Math.max(max, count);
          sum+=count;
          if(count<=0){
            monotonic=false;
            missing.add(Integer.valueOf(i));
          }else{
            if (count < minConstraintValue){
              minConstraint.add(Integer.valueOf(i));
            }
          }
        }
        double average = sum/(double)realItemTableSize;
        buf.append("maxItems,realMaxItems,numCompetitors,minComPerITem,maxComPerItem,avgComPerItem,itemsWithoutCompetitors,itemsNotHavingMinCompetitors");
        buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
        buf.append(counter.length);
        buf.append(delimiter);
        buf.append(realItemTableSize);
        buf.append(delimiter);
        buf.append(sum);
        buf.append(delimiter);
        buf.append(min);
        buf.append(delimiter);
        buf.append(max);
        buf.append(delimiter);
        buf.append(average);
        buf.append(delimiter);
        buf.append(missing.size());
        buf.append(delimiter);
        buf.append(minConstraint.size());
        buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
        buf.append("List of item ID's with competitor count = 0:");
        buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
        for (int i = 0; i < missing.size(); i++) {
			buf.append(missing.get(i));
            buf.append(delimiter);
            buf.append(counter[((Number)missing.get(i)).intValue()]);
            buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
		}
        buf.append("List of item ID's with competitor count < ");
        buf.append(minConstraintValue);
        buf.append(":");
        buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
        for (int i = 0; i < minConstraint.size(); i++) {
          buf.append(minConstraint.get(i));
          buf.append(delimiter);
          buf.append(counter[((Number)minConstraint.get(i)).intValue()]);
          buf.append(pdgf.util.Constants.DEFAULT_LINESEPARATOR);
        }
        System.out.println(buf.toString());
        
     ]]></formaterTemplate>
    
      <!-- collect statistics -->
      <counterTemplate><![CDATA[ 
      
      	  long item_sk= ((Number)field[1].getValue()).longValue();
	      if(item_sk>(long)counter.length){
	    	  System.err.println("Item_markteprice audit system error. Not enough counters. " + Long.toString(item_sk));
	      }
	      counter[(int)item_sk].incrementAndGet();
       
      
     ]]></counterTemplate>
    </output>
  </output>
			</table>

			<table name="inventory">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>

			<!-- not refreshed tables  tables -->
			<table name="store_sales">
				<output name="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[ 
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>


			<table name="store_returns">
				<output name="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[ 
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
					
					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>

			<table name="web_sales">
				<output name="MultiLineOutput">
					<multilineFieldId>3</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition>
					<![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}
				
					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>

			<table name="web_returns">
				<output name="MultiLineOutput">
					<multilineFieldId>2</multilineFieldId>
					<interleaveMultilines>false</interleaveMultilines>
					<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>


			<table name="web_clickstreams">
				<output name="MultiLineOutput">
					<multilineFieldId>3</multilineFieldId>
					<interleaveMultilines>${interleaveWebClicks}</interleaveMultilines>
					<fileTemplate><![CDATA[outputDir + table.getName() +(nodeCount!=1?"_"+pdgf.util.StaticHelper.zeroPaddedNumber(nodeNumber,nodeCount):"")+ fileEnding]]></fileTemplate>
					<outputDir>output/</outputDir>
					<fileEnding>.dat</fileEnding>
					<delimiter>|</delimiter>
					<charset>UTF-8</charset>
					<sortByRowID>true</sortByRowID>
				</output>
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>


			<table name="product_reviews">
				<scheduler name="DefaultScheduler">
					<partitioner
						name="pdgf.core.dataGenerator.scheduler.TemplatePartitioner">
						<prePartition><![CDATA[  
					if(${REFRESH_SYSTEM_ENABLED}>0){
						int tableID = table.getTableID();
						int timeID = 0;
						long lastTableRow=table.getSize()-1;
						long rowStart;
						long rowStop;
						boolean exclude=false;
						long refreshRows=table.getSize()*(1.0-${REFRESH_PERCENTAGE});
						if(${REFRESH_PHASE}>0){
							//Refresh part
							rowStart = lastTableRow - refreshRows +1;
							rowStop  = lastTableRow;
							if(refreshRows<=0){
								exclude=true;
							}
							
						}else{
							//"normal" part
							rowStart = 0;
							rowStop = lastTableRow - refreshRows;
						}
						return new pdgf.core.dataGenerator.scheduler.Partition(tableID, timeID,rowStart,rowStop,exclude);
					}else{
						//DEFAULT
						return getParentPartitioner().getDefaultPrePartition(project, table);				
					}

					]]></prePartition>
					</partitioner>
				</scheduler>
			</table>
		</tables>
	</schema>
</generation>
